# Simple Authentication in Lithium

If you're doing much more than simple static content delivery, chances are you'll end up needing to protect access to certain resources and functionality your application provides. Lithium's Auth setup is simple and allows you to quickly create a framework for managing and protecting those features.

## Data Setup

The Auth setup makes access decisions based on information in your data store. The first thing you'll need to do is set up a model that handles user credentials. That model first needs a connection: set that up first in `app/config/connections.php`. If you're using MySQL as your data source, it should look something like this:

{{{
use lithium\data\Connections;

Connections::add('default', array(
	'type'     => 'database',
	'adapter'  => 'MySql',
	'database' => 'mydatabase',
	'user'     => 'myusername',
	'password' => 'mypassword'
));
}}}

If you're running with Mongo, it'll look a bit different:

{{{
Connections::add('default', array(
	'type'     => 'MongoDb',
	'database' => 'li3',
	'user'     => 'myusername',
	'password' => 'mypassword'
));
}}}

Developers using MySQL will need a `users` table with at least the columns `id`, `username`, and `password`. Those using Mongo will need a collection in the database with a similar structure. You can customize the model and fields Auth will use as we'll see later. Make sure to take a moment and set up your `User` model as well in `app/models/User.php`:

{{{
namespace app\models;

class Users extends \lithium\data\Model {
}
}}}

Once you've got that setup, your application more or less interacts with the data in the same way, regardless of the particular data source you're using.

## User Creation

Creating users that are compatible with the `Auth` setup is worth noting. While configurable, the default setup assumes a users data source with a sha1 hashed password field, and a username field. Please keep these defaults in mind as you create controller logic or view forms that interact with user data.

For convenience, we also recommend setting up a filter to automatically hash user passwords when new users are created:

{{{
User::applyFilter('save', function($self, $params, $chain){
	$entity = $params['entity'];
	if (!$entity->id) {
		$params['data']['password'] = \lithium\util\String::hash($params['data']['password']);
	}
	if (!empty($params['data'])) {
		$entity->set($params['data']);
	}
	$params['entity'] = $entity;
	return $chain->next($self, $params, $chain);
});
}}}

Then you can create a new user by doing this sort of thing, one time, somewhere in the app:

{{{
$user = Users::create();
$user->save(array('email' => 'user@example.com', 'password' => 'thecakeisali3'));
exit;
}}}

## Bootstrapping Auth

Once the data end of things is in place, Lithium needs to know you intend to use Auth, and with which settings. As with most things, this is done in a specific bootstrap file.

First, point Lithium's main bootstrap file to our Auth bootstrap file, which is now combined with Session. Start by editing `app/config/bootstrap.php` to include (or uncomment) a line requiring the auth bootstrap file:

{{{

require __DIR__ . '/bootstrap/session.php';

}}}

Next, make sure the Session setup is using the PHP adapter, then making some initial Auth configurations:

{{{
use lithium\storage\Session;
use lithium\security\Auth;

Session::config(array(
	'default' => array('adapter' => 'Php')
));

Auth::config(array(
	'default' => array(
		'adapter' => 'Form',
		'model'   => 'Users',
		'fields'  => array('username', 'password')
	)
));
}}}

The Session setup is pretty straightforward, and the Auth configuration tells Lithium which adapter we want to use (one suited for credentials submitted via web form), and details about the model involved and used to match incoming credentials against.

Note that the configuration information is housed in an array keyed 'customer'. Auth supports many different simultaneous configurations. Here we're only creating one, but you could add more here as needed.

## Authentication and Controller Actions

The first action you'll need to setup is the one that authenticates your users and adjusts the session to mark the user as identified. You could place this as you please, but it's generally accepted to see it in `Users::login()`. The suggested approach is very simple:

{{{
namespace app\controllers;

use lithium\security\Auth;

class UsersController extends \lithium\action\Controller {

	public function login() {
		if ($this->request->data) {
			if (Auth::check('default', $this->request)) {
				return $this->redirect('/');
			}
		}
	}

	/* ... */
}
}}}

The meat is a conditional that calls `Auth::check()` and hands it the name of our desired Auth configuration name (remember we named the whole config array 'customer'?), and information about the current request.

If the user has been successfully verified, the session is updated to mark the user as authenticated and the user is redirected to the root of the application. If there are problems with the authentication process the login view is rendered again.

As a reference, the web form that sends the credentials and is the content of the `login` view at `app/views/users/login.html.php` should contain something that looks like this:

{{{
<?=$this->form->create(null); ?>
	<?=$this->form->field('username'); ?>
	<?=$this->form->field('password', array('type' => 'password')); ?>
	<?=$this->form->submit('Log in'); ?>
<?=$this->form->end(); ?>
}}}

The setup for protecting resources is the same as it is for initially authenticating the user (though you'd want to redirect the user to the login action on error). Use `Auth::check()` in your controller actions to make sure that sections in your application are blocked from non-authenticated users.

## Checking Out

Finally, you'll want to create an action that clears an end-user's authentication session on your system. Do that by making a call to `Auth::clear()` in a controller action.

{{{
namespace app\controllers;

use lithium\security\Auth;

class UsersController extends \lithium\action\Controller {

	/* ... */

	public function logout() {
		Auth::clear('default');
		return $this->redirect('/');
	}
}
}}}
